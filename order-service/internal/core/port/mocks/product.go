// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source=product.go -destination=./mocks/product.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	dto "github.com/huydq/order-service/internal/core/domain/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIProductServiceClient is a mock of IProductServiceClient interface.
type MockIProductServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockIProductServiceClientMockRecorder
	isgomock struct{}
}

// MockIProductServiceClientMockRecorder is the mock recorder for MockIProductServiceClient.
type MockIProductServiceClientMockRecorder struct {
	mock *MockIProductServiceClient
}

// NewMockIProductServiceClient creates a new mock instance.
func NewMockIProductServiceClient(ctrl *gomock.Controller) *MockIProductServiceClient {
	mock := &MockIProductServiceClient{ctrl: ctrl}
	mock.recorder = &MockIProductServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductServiceClient) EXPECT() *MockIProductServiceClientMockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockIProductServiceClient) GetProducts(ctx context.Context, reqDto dto.GetProductsRequestDTO) (*dto.GetProductsResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, reqDto)
	ret0, _ := ret[0].(*dto.GetProductsResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductServiceClientMockRecorder) GetProducts(ctx, reqDto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductServiceClient)(nil).GetProducts), ctx, reqDto)
}
